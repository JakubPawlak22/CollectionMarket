@page "/producttypes/edit/{Id}"
@inject IProductTypeRepository _productsRepo;
@inject ICategoryRepository _categoryRepo;
@inject IAttributeRepository _attributeRepo;
@inject IAttributeValueModelFactory _attributeValueModelFactory;
@inject IProductTypeModelFactory _productModelFactory;
@inject NavigationManager _naviManager;
@using Common.Enums

<div class="card">
    <h3 class="card-title">Edit Product</h3>
    @if (Model == null || Model.AttributeValues == null)
    {
        <LoadingMessage Message="Loading..." />
    }
    else
    {
        @if (!isSuccess)
        {
            <ErrorMessage Message="Something went wrong." />
        }
        <div class="card-body">
            <EditForm Model="Model" OnValidSubmit="HandleEditProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="name">Name</label>
                    <InputText Id="name" class="form-control" @bind-Value="Model.Name" />
                    <ValidationMessage For="@(() => Model.Name)" />
                </div>
                <div class="form-group">
                    <label for="categoryId">Category</label>
                    <select class="form-control" id="category" @onchange="OnCategoryChange">
                        <option value="">-- Select Category --</option>
                        @if (Categories != null)
                        {
                            foreach (var cat in Categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        }
                    </select>
                    <ValidationMessage For="@(() => Model.CategoryId)" />
                </div>
                <div class="card-body">
                    <h2>Attributes</h2>
                    @foreach (var value in Model.AttributeValues)
                    {
                        <div class="form-group">
                            <label for="name">@value.AttributeName</label>
                            @switch (value.DataType)
                            {
                                case DataTypes.Number:
                                    <InputNumber Id=@($"value {value.AttributeId}") class="form-control" @bind-Value="value.NumberAttributeValue" />
                                    break;
                                case DataTypes.Text:
                                    <InputText Id=@($"value {value.AttributeId}") class="form-control" @bind-Value="value.TextAttributeValue" />
                                    break;
                                case DataTypes.Boolean:
                                    <select @bind="@value.BooleanAttributeValue" class="form-control" id=@($"value {value.AttributeId}")>
                                        <option value="">-- Select True or False --</option>
                                        <option value="True">True</option>
                                        <option value="False">False</option>
                                    </select>
                                    break;
                                case DataTypes.Date:
                                    <InputDate Id=@($"value {value.AttributeId}") class="form-control" @bind-Value="value.DateAttributeValue" />
                                    break;
                            }
                        </div>
                    }
                </div>
                <button type="submit" class="btn btn-primary btn-block">Submit</button>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private ProductTypeEditFormModel Model;
    private IList<CategoryModel> Categories;
    private bool isSuccess = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int id = Convert.ToInt32(Id);
            var info = await _productsRepo.Get(Endpoints.ProductTypesEndpoint, id);
            Model = _productModelFactory.CreateEditFormModel(info);
            Categories = await _categoryRepo.Get(Endpoints.CategoriesEndpoint);
            this.StateHasChanged();
        }
    }

    private async Task HandleEditProduct()
    {
        var EditModel = _productModelFactory.CreateUpdateModel(Model);
        isSuccess = await _productsRepo.Update(Endpoints.ProductTypesEndpoint, EditModel, Model.Id);
        if (isSuccess)
        {
            _naviManager.NavigateTo("/producttypes");
        }
    }

    private async Task OnCategoryChange(ChangeEventArgs e)
    {
        int categoryId;
        if (Int32.TryParse(e.Value.ToString(), out categoryId))
        {
            Model.CategoryId = categoryId;
            if (Model.CategoryId != null)
            {
                var attributes = await _attributeRepo.GetCategoryAttributes(Endpoints.AttributesEndpoint, Model.CategoryId.Value);
                Model.AttributeValues = _attributeValueModelFactory.CreateAttributeValueModels(attributes);
            }
        }
        else
        {
            Model.AttributeValues = new List<AttributeValueEditFormModel>();
        }
        this.StateHasChanged();
    }
}
