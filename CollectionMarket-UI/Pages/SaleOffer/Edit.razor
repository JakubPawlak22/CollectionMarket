@page "/saleoffers/edit/{Id}"
@inject ISaleOfferRepository _saleOfferRepo;
@inject ISaleOfferModelFactory _saleOfferModelFactory;
@inject NavigationManager _naviManager;
@using Common.Enums

@if (Model == null)
{
    <LoadingMessage Message="Loading Sale Offer informations" />
}
else
{
    <div class="card">
        <h3 class="card-title">Edit Sale Offer</h3>
        @if (!isSuccess)
        {
            <ErrorMessage Message="Something went wrong." />
        }
        <div class="card-body">
            <EditForm Model="Model" OnValidSubmit="HandleEditSaleOffer">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="count">Count</label>
                    <InputNumber Id="count" class="form-control" @bind-Value="Model.Count" />
                    <ValidationMessage For="@(()=>Model.Count)" />
                </div>
                <div class="form-group">
                    <label for="price-per-item">Price Per Item</label>
                    <InputNumber Id="price-per-item" class="form-control" @bind-Value="Model.PricePerItem" />
                    <ValidationMessage For="@(()=>Model.PricePerItem)" />
                </div>
                <div class="form-group">
                    <label for="condition">Condition</label>
                    <select @bind="Model.Condition" class="form-control" id="condition">
                        <option value="">-- Select Condition --</option>
                        @foreach (Condition condition in (Condition[])Enum.GetValues(typeof(Condition)))
                        {

                            <option value="@condition">@condition</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <InputText Id="description" class="form-control" @bind-Value="Model.Description" />
                    <ValidationMessage For="@(()=>Model.Description)" />
                </div>
                <SubmitButton />
            </EditForm>
        </div>
    </div>
}
@code {
    [Parameter]
    public string Id { get; set; }

    bool isSuccess = true;
    private SaleOfferUpdateModel Model;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int id = Convert.ToInt32(Id);
            var info = await _saleOfferRepo.Get(Endpoints.SaleOffersEndpoint, id);
            Model = _saleOfferModelFactory.CreateUpdateModel(info);
            this.StateHasChanged();
        }
    }

    private async Task HandleEditSaleOffer()
    {
        int id = Convert.ToInt32(Id);
        isSuccess = await _saleOfferRepo.Update(Endpoints.SaleOffersEndpoint, Model, id);
        if (isSuccess)
        {
            _naviManager.NavigateTo("/");
        }
    }
}
